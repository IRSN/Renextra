% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RenouvTList.R
\name{RenouvTList}
\alias{RenouvTList}
\title{\code{Renouv} or POT Models with several Thresholds}
\usage{
RenouvTList(
  x,
  threshold = NULL,
  effDuration = NULL,
  distname.y = "GPD",
  loopIni = FALSE,
  start.par.y = NULL,
  ...
)
}
\arguments{
\item{x}{A numeric vector or a suitable \code{Rendata} object, see
\code{\link{Renouv}}.}

\item{threshold}{A numeric vector of thresholds.}

\item{effDuration, distname.y}{Effective duration and distribution
See \code{\link{Renouv}}.}

\item{loopIni}{Logical. If \code{TRUE} the initial values of the
parameters for a threshold are derived from the known
converged cases obtained before. This is mainy useful in the
cas where historical data are used, because no convergence
problems should arise as long as no historical/censored
observations are used. \bold{NOT IMPLEMENTED YET}.}

\item{start.par.y}{Used to provide the parameter names and initial
values in \code{\link[Renext]{Renouv}} when the distribution
is not one of the special distributions. This can be either a
single vector of initial values to be used for all thresholds,
or a collection of initial values, one by threshold. In the
first case, \code{start.par.y} must be a named numeric vector
or a named list to be passed as the \code{start.par.y}
argument of \code{\link{Renouv}}. In the second case, one must
use either a numeric matrix with \code{length(threshold)}
rows, or a list of \code{length(threshold)} numeric vectors or
lists. The argument to be passed to \code{\link{Renouv}} will
then be given by looping over the rows of the matrix or over
the elements of the list.}

\item{...}{Further arguments to be passed to
\code{\link{Renouv}}. Graphical arguments should not be used.}
}
\value{
An object with (S3) class \code{"RenouvTList"}. This S3
    class has a number of methods.
}
\description{
Fit a \code{Renouv} or POT model for several
    candidate thresholds. The result is an object having the S3
    class \code{"RenouvTList"} for which several methods have been
    implemented in \pkg{Renextra}.
}
\details{
Although the classical methods like \code{coef} are
    mainly obtained with \code{lapply} or \code{sapply}, the
    result is in some cases given a special class that allows
    further invetigation. See the \bold{Example} section.
}
\note{
The warnings generated when iteratively calling
    \code{\link[Renext]{Renouv}} are suppressed.
}
\section{Caution}{
 the default distribution for the exceedances is
    taken to be the usual two-parameter Generalised Pareto
    \code{"GPD"} rather than exponential.
}

\examples{
fit <- RenouvTList(Garonne,
                   threshold = seq(from = 2401, to = 3001, by = 100),
                   distname.y = "GPD")

methods(class = "RenouvTList")
autoplot(predict(fit))
autoplot(coef(fit))

## Use more thresholds and compare with the jittered data
fit <- RenouvTList(Garonne,
                   threshold = seq(from = 2401, to = 3001, by = 10),
                   distname.y = "GPD")
autoplot(coef(fit))
fitJit <- RenouvTList(GaronneJit,
                      threshold = seq(from = 2401, to = 3001, by = 10),
                      distname.y = "GPD")
autoplot(coef(fitJit))

## Use an Extended GP Distribution fo the excesses. To get initial values
## for the parameters, we add a column of ones to the coefficients of
## 'fitJit'. Note that we must use `reParam = FALSE` to match the names
## of the parameters of the Renext GPD.
fitJit0 <- RenouvTList(GaronneJit,
                       threshold = seq(from = 2401, to = 3001, by = 50),
                       distname.y = "GPD")
spy <- cbind(kappa = 1.0, coef(fitJit0, reParam = FALSE))
spy <- spy[ , c("scale", "shape", "kappa")]
\dontrun{
fitJit1 <- RenouvTList(GaronneJit,
                       threshold = seq(from = 2401, to = 3001, by = 50),
                       distname.y = "EGPD3", start.par.y = spy)
autoplot(fitJit1)
}
}
